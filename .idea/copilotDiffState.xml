<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/test/java/com/triageflow/DBtest/dao/PatientExamAssignmentDAOTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/com/triageflow/DBtest/dao/PatientExamAssignmentDAOTest.java" />
              <option name="originalContent" value="// PatientExamAssignmentDAOTest.java&#10;package com.triageflow.DBtest.dao;&#10;&#10;import com.triageflow.dao.PatientExamAssignmentDAO;&#10;import com.triageflow.dao.impl.PatientExamAssignmentDAOImpl;&#10;import com.triageflow.entity.PatientExamAssignment;&#10;import com.triageflow.utils.DBConnection;&#10;import org.junit.jupiter.api.*;&#10;&#10;import java.sql.Connection;&#10;import java.sql.SQLException;&#10;import java.sql.Statement;&#10;import java.util.Date;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;@TestInstance(TestInstance.Lifecycle.PER_CLASS)&#10;public class PatientExamAssignmentDAOTest {&#10;&#10;    private PatientExamAssignmentDAO assignmentDAO;&#10;    private PatientExamAssignment testAssignment;&#10;&#10;    @BeforeAll&#10;    void setup() {&#10;        assignmentDAO = new PatientExamAssignmentDAOImpl();&#10;&#10;        // 清空测试数据&#10;        try (Connection conn = DBConnection.getConnection();&#10;             Statement stmt = conn.createStatement()) {&#10;&#10;            // 删除测试分配数据&#10;            stmt.executeUpdate(&quot;DELETE FROM patient_exam_assignments WHERE assignment_id IN &quot; +&#10;                    &quot;(SELECT assignment_id_to_delete FROM &quot; +&#10;                    &quot;(SELECT pea.assignment_id as assignment_id_to_delete FROM patient_exam_assignments pea &quot; +&#10;                    &quot;JOIN patients p ON pea.patient_id = p.patient_id &quot; +&#10;                    &quot;WHERE p.name LIKE 'Test%') AS temp)&quot;);&#10;&#10;        } catch (SQLException e) {&#10;            fail(&quot;数据库清理失败: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @BeforeEach&#10;    void init() {&#10;        // 创建测试分配记录&#10;        testAssignment = new PatientExamAssignment();&#10;        testAssignment.setPatientId(1); // 假设存在患者ID为1&#10;        testAssignment.setExamId(1);    // 假设存在检查项目ID为1&#10;        testAssignment.setStatus(&quot;Pending&quot;);&#10;        testAssignment.setPriority(1);&#10;        testAssignment.setWaitingTimeMinutes(0);&#10;        testAssignment.setQueuePosition(0);&#10;&#10;        assignmentDAO.save(testAssignment);&#10;    }&#10;&#10;    @AfterEach&#10;    void tearDown() {&#10;        // 清理测试数据&#10;        if (testAssignment != null &amp;&amp; testAssignment.getAssignmentId() &gt; 0) {&#10;            assignmentDAO.delete(testAssignment.getAssignmentId());&#10;        }&#10;    }&#10;&#10;    @Test&#10;    void testFindById() {&#10;        Optional&lt;PatientExamAssignment&gt; foundAssignment = assignmentDAO.findById(testAssignment.getAssignmentId());&#10;        assertTrue(foundAssignment.isPresent(), &quot;应该能找到分配记录&quot;);&#10;        assertEquals(testAssignment.getPatientId(), foundAssignment.get().getPatientId(), &quot;患者ID应该匹配&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testFindAll() {&#10;        List&lt;PatientExamAssignment&gt; assignments = assignmentDAO.findAll();&#10;        assertFalse(assignments.isEmpty(), &quot;分配记录列表不应为空&quot;);&#10;        assertTrue(assignments.size() &gt;= 1, &quot;应该至少有一个分配记录&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testSave() {&#10;        PatientExamAssignment newAssignment = new PatientExamAssignment();&#10;        newAssignment.setPatientId(1);&#10;        newAssignment.setExamId(2);&#10;        newAssignment.setStatus(&quot;Pending&quot;);&#10;        newAssignment.setPriority(2);&#10;        newAssignment.setWaitingTimeMinutes(5);&#10;        newAssignment.setQueuePosition(1);&#10;&#10;        PatientExamAssignment savedAssignment = assignmentDAO.save(newAssignment);&#10;        assertNotNull(savedAssignment.getAssignmentId(), &quot;保存的分配记录应该有ID&quot;);&#10;        assertTrue(savedAssignment.getAssignmentId() &gt; 0, &quot;分配记录ID应该大于0&quot;);&#10;&#10;        // 清理&#10;        assignmentDAO.delete(savedAssignment.getAssignmentId());&#10;    }&#10;&#10;    @Test&#10;    void testUpdate() {&#10;        testAssignment.setStatus(&quot;Scheduled&quot;);&#10;        PatientExamAssignment updatedAssignment = assignmentDAO.update(testAssignment);&#10;        assertEquals(&quot;Scheduled&quot;, updatedAssignment.getStatus(), &quot;分配状态应该更新&quot;);&#10;&#10;        Optional&lt;PatientExamAssignment&gt; foundAssignment = assignmentDAO.findById(testAssignment.getAssignmentId());&#10;        assertTrue(foundAssignment.isPresent(), &quot;应该能找到更新后的分配记录&quot;);&#10;        assertEquals(&quot;Scheduled&quot;, foundAssignment.get().getStatus(), &quot;分配状态应该已更新&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testDelete() {&#10;        int assignmentId = testAssignment.getAssignmentId();&#10;        assignmentDAO.delete(assignmentId);&#10;&#10;        Optional&lt;PatientExamAssignment&gt; foundAssignment = assignmentDAO.findById(assignmentId);&#10;        assertFalse(foundAssignment.isPresent(), &quot;删除后不应找到分配记录&quot;);&#10;&#10;        // 防止tearDown中重复删除&#10;        testAssignment = null;&#10;    }&#10;&#10;    @Test&#10;    void testDeleteByPatientId() {&#10;        // 创建另一个分配记录用于测试&#10;        PatientExamAssignment anotherAssignment = new PatientExamAssignment();&#10;        anotherAssignment.setPatientId(testAssignment.getPatientId());&#10;        anotherAssignment.setExamId(2);&#10;        anotherAssignment.setStatus(&quot;Pending&quot;);&#10;        anotherAssignment.setPriority(1);&#10;        anotherAssignment.setWaitingTimeMinutes(0);&#10;        anotherAssignment.setQueuePosition(0);&#10;&#10;        assignmentDAO.save(anotherAssignment);&#10;&#10;        // 删除该患者的所有分配记录&#10;        assignmentDAO.deleteByPatientId(testAssignment.getPatientId());&#10;&#10;        // 验证是否已删除&#10;        List&lt;PatientExamAssignment&gt; assignments = assignmentDAO.findByPatientId(testAssignment.getPatientId());&#10;        assertTrue(assignments.isEmpty(), &quot;删除后不应找到该患者的任何分配记录&quot;);&#10;&#10;        // 防止tearDown中重复删除&#10;        testAssignment = null;&#10;    }&#10;&#10;    @Test&#10;    void testDeleteByExamId() {&#10;        // 创建另一个分配记录用于测试&#10;        PatientExamAssignment anotherAssignment = new PatientExamAssignment();&#10;        anotherAssignment.setPatientId(2);&#10;        anotherAssignment.setExamId(testAssignment.getExamId());&#10;        anotherAssignment.setStatus(&quot;Pending&quot;);&#10;        anotherAssignment.setPriority(1);&#10;        anotherAssignment.setWaitingTimeMinutes(0);&#10;        anotherAssignment.setQueuePosition(0);&#10;&#10;        assignmentDAO.save(anotherAssignment);&#10;&#10;        // 删除该检查项目的所有分配记录&#10;        assignmentDAO.deleteByExamId(testAssignment.getExamId());&#10;&#10;        // 验证是否已删除&#10;        List&lt;PatientExamAssignment&gt; assignments = assignmentDAO.findByExamId(testAssignment.getExamId());&#10;        assertTrue(assignments.isEmpty(), &quot;删除后不应找到该检查项目的任何分配记录&quot;);&#10;&#10;        // 防止tearDown中重复删除&#10;        testAssignment = null;&#10;    }&#10;&#10;    @Test&#10;    void testDeleteByPatientAndExam() {&#10;        // 删除特定的分配记录&#10;        assignmentDAO.deleteByPatientAndExam(testAssignment.getPatientId(), testAssignment.getExamId());&#10;&#10;        // 验证是否已删除&#10;        Optional&lt;PatientExamAssignment&gt; foundAssignment = assignmentDAO.findById(testAssignment.getAssignmentId());&#10;        assertFalse(foundAssignment.isPresent(), &quot;删除后不应找到该分配记录&quot;);&#10;&#10;        // 防止tearDown中重复删除&#10;        testAssignment = null;&#10;    }&#10;&#10;    @Test&#10;    void testFindByPatientId() {&#10;        List&lt;PatientExamAssignment&gt; assignments = assignmentDAO.findByPatientId(testAssignment.getPatientId());&#10;        assertNotNull(assignments, &quot;患者分配记录列表不应为null&quot;);&#10;        assertTrue(assignments.size() &gt;= 1, &quot;应该至少找到一个分配记录&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testFindByExamId() {&#10;        List&lt;PatientExamAssignment&gt; assignments = assignmentDAO.findByExamId(testAssignment.getExamId());&#10;        assertNotNull(assignments, &quot;检查项目分配记录列表不应为null&quot;);&#10;        assertTrue(assignments.size() &gt;= 1, &quot;应该至少找到一个分配记录&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testFindByStatus() {&#10;        List&lt;PatientExamAssignment&gt; assignments = assignmentDAO.findByStatus(&quot;Pending&quot;);&#10;        assertNotNull(assignments, &quot;状态为Pending的分配记录列表不应为null&quot;);&#10;        assertTrue(assignments.size() &gt;= 1, &quot;应该至少找到一个Pending状态的分配记录&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testUpdateAssignmentStatus() {&#10;        boolean updated = assignmentDAO.updateAssignmentStatus(testAssignment.getAssignmentId(), &quot;Completed&quot;);&#10;        assertTrue(updated, &quot;应该成功更新分配状态&quot;);&#10;&#10;        Optional&lt;PatientExamAssignment&gt; foundAssignment = assignmentDAO.findById(testAssignment.getAssignmentId());&#10;        assertTrue(foundAssignment.isPresent(), &quot;应该能找到分配记录&quot;);&#10;        assertEquals(&quot;Completed&quot;, foundAssignment.get().getStatus(), &quot;分配状态应该已更新&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testScheduleExam() {&#10;        boolean scheduled = assignmentDAO.scheduleExam(testAssignment.getAssignmentId(), 1, new Date());&#10;        assertTrue(scheduled, &quot;应该成功安排检查&quot;);&#10;&#10;        Optional&lt;PatientExamAssignment&gt; foundAssignment = assignmentDAO.findById(testAssignment.getAssignmentId());&#10;        assertTrue(foundAssignment.isPresent(), &quot;应该能找到分配记录&quot;);&#10;        assertEquals(&quot;Scheduled&quot;, foundAssignment.get().getStatus(), &quot;分配状态应该已更新为Scheduled&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testFindPendingAssignments() {&#10;        List&lt;PatientExamAssignment&gt; assignments = assignmentDAO.findPendingAssignments();&#10;        assertNotNull(assignments, &quot;待处理分配记录列表不应为null&quot;);&#10;        assertTrue(assignments.size() &gt;= 1, &quot;应该至少找到一个待处理分配记录&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testCountAssignmentsByPatient() {&#10;        int count = assignmentDAO.countAssignmentsByPatient(testAssignment.getPatientId());&#10;        assertTrue(count &gt;= 1, &quot;患者分配记录计数应该至少为1&quot;);&#10;    }&#10;}" />
              <option name="updatedContent" value="// PatientExamAssignmentDAOTest.java&#10;package com.triageflow.DBtest.dao;&#10;&#10;import com.triageflow.dao.PatientExamAssignmentDAO;&#10;import com.triageflow.dao.impl.PatientExamAssignmentDAOImpl;&#10;import com.triageflow.entity.PatientExamAssignment;&#10;import com.triageflow.utils.DBConnection;&#10;import org.junit.jupiter.api.*;&#10;&#10;import java.sql.Connection;&#10;import java.sql.SQLException;&#10;import java.sql.Statement;&#10;import java.util.Date;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;@TestInstance(TestInstance.Lifecycle.PER_CLASS)&#10;public class PatientExamAssignmentDAOTest {&#10;&#10;    private PatientExamAssignmentDAO assignmentDAO;&#10;    private PatientExamAssignment testAssignment;&#10;&#10;    @BeforeAll&#10;    void setup() {&#10;        assignmentDAO = new PatientExamAssignmentDAOImpl();&#10;&#10;        // 清空测试数据&#10;        try (Connection conn = DBConnection.getConnection();&#10;             Statement stmt = conn.createStatement()) {&#10;&#10;            // 删除测试分配数据&#10;            stmt.executeUpdate(&quot;DELETE FROM patient_exam_assignments WHERE assignment_id IN &quot; +&#10;                    &quot;(SELECT assignment_id_to_delete FROM &quot; +&#10;                    &quot;(SELECT pea.assignment_id as assignment_id_to_delete FROM patient_exam_assignments pea &quot; +&#10;                    &quot;JOIN patients p ON pea.patient_id = p.patient_id &quot; +&#10;                    &quot;WHERE p.name LIKE 'Test%') AS temp)&quot;);&#10;&#10;        } catch (SQLException e) {&#10;            fail(&quot;数据库清理失败: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @BeforeEach&#10;    void init() {&#10;        // 创建测试分配记录&#10;        testAssignment = new PatientExamAssignment();&#10;        testAssignment.setPatientId(1); // 假设存在患者ID为1&#10;        testAssignment.setExamId(1);    // 假设存在检查项目ID为1&#10;        testAssignment.setStatus(&quot;Pending&quot;);&#10;        testAssignment.setPriority(1);&#10;        testAssignment.setWaitingTimeMinutes(0);&#10;        testAssignment.setQueuePosition(0);&#10;&#10;        assignmentDAO.save(testAssignment);&#10;    }&#10;&#10;    @AfterEach&#10;    void tearDown() {&#10;        // 清理测试数据&#10;        if (testAssignment != null &amp;&amp; testAssignment.getAssignmentId() &gt; 0) {&#10;            assignmentDAO.delete(testAssignment.getAssignmentId());&#10;        }&#10;    }&#10;&#10;    @Test&#10;    void testFindById() {&#10;        Optional&lt;PatientExamAssignment&gt; foundAssignment = assignmentDAO.findById(testAssignment.getAssignmentId());&#10;        assertTrue(foundAssignment.isPresent(), &quot;应该能找到分配记录&quot;);&#10;        assertEquals(testAssignment.getPatientId(), foundAssignment.get().getPatientId(), &quot;患者ID应该匹配&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testFindAll() {&#10;        List&lt;PatientExamAssignment&gt; assignments = assignmentDAO.findAll();&#10;        assertFalse(assignments.isEmpty(), &quot;分配记录列表不应为空&quot;);&#10;        assertTrue(assignments.size() &gt;= 1, &quot;应该至少有一个分配记录&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testSave() {&#10;        PatientExamAssignment newAssignment = new PatientExamAssignment();&#10;        newAssignment.setPatientId(1);&#10;        newAssignment.setExamId(2);&#10;        newAssignment.setStatus(&quot;Pending&quot;);&#10;        newAssignment.setPriority(2);&#10;        newAssignment.setWaitingTimeMinutes(5);&#10;        newAssignment.setQueuePosition(1);&#10;&#10;        PatientExamAssignment savedAssignment = assignmentDAO.save(newAssignment);&#10;        assertNotNull(savedAssignment.getAssignmentId(), &quot;保存的分配记录应该有ID&quot;);&#10;        assertTrue(savedAssignment.getAssignmentId() &gt; 0, &quot;分配记录ID应该大于0&quot;);&#10;&#10;        // 清理&#10;        assignmentDAO.delete(savedAssignment.getAssignmentId());&#10;    }&#10;&#10;    @Test&#10;    void testUpdate() {&#10;        testAssignment.setStatus(&quot;Scheduled&quot;);&#10;        PatientExamAssignment updatedAssignment = assignmentDAO.update(testAssignment);&#10;        assertEquals(&quot;Scheduled&quot;, updatedAssignment.getStatus(), &quot;分配状态应该更新&quot;);&#10;&#10;        Optional&lt;PatientExamAssignment&gt; foundAssignment = assignmentDAO.findById(testAssignment.getAssignmentId());&#10;        assertTrue(foundAssignment.isPresent(), &quot;应该能找到更新后的分配记录&quot;);&#10;        assertEquals(&quot;Scheduled&quot;, foundAssignment.get().getStatus(), &quot;分配状态应该已更新&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testDelete() {&#10;        int assignmentId = testAssignment.getAssignmentId();&#10;        assignmentDAO.delete(assignmentId);&#10;&#10;        Optional&lt;PatientExamAssignment&gt; foundAssignment = assignmentDAO.findById(assignmentId);&#10;        assertFalse(foundAssignment.isPresent(), &quot;删除后不应找到分配记录&quot;);&#10;&#10;        // 防止tearDown中重复删除&#10;        testAssignment = null;&#10;    }&#10;&#10;    @Test&#10;    void testDeleteByPatientId() {&#10;        // 创建另一个分配记录用于测试&#10;        PatientExamAssignment anotherAssignment = new PatientExamAssignment();&#10;        anotherAssignment.setPatientId(testAssignment.getPatientId());&#10;        anotherAssignment.setExamId(2);&#10;        anotherAssignment.setStatus(&quot;Pending&quot;);&#10;        anotherAssignment.setPriority(1);&#10;        anotherAssignment.setWaitingTimeMinutes(0);&#10;        anotherAssignment.setQueuePosition(0);&#10;&#10;        assignmentDAO.save(anotherAssignment);&#10;&#10;        // 删除该患者的所有分配记录&#10;        assignmentDAO.deleteByPatientId(testAssignment.getPatientId());&#10;&#10;        // 验证是否已删除&#10;        List&lt;PatientExamAssignment&gt; assignments = assignmentDAO.findByPatientId(testAssignment.getPatientId());&#10;        assertTrue(assignments.isEmpty(), &quot;删除后不应找到该患者的任何分配记录&quot;);&#10;&#10;        // 防止tearDown中重复删除&#10;        testAssignment = null;&#10;    }&#10;&#10;    @Test&#10;    void testDeleteByExamId() {&#10;        // 创建另一个分配记录用于测试&#10;        PatientExamAssignment anotherAssignment = new PatientExamAssignment();&#10;        anotherAssignment.setPatientId(2);&#10;        anotherAssignment.setExamId(testAssignment.getExamId());&#10;        anotherAssignment.setStatus(&quot;Pending&quot;);&#10;        anotherAssignment.setPriority(1);&#10;        anotherAssignment.setWaitingTimeMinutes(0);&#10;        anotherAssignment.setQueuePosition(0);&#10;&#10;        assignmentDAO.save(anotherAssignment);&#10;&#10;        // 删除该检查项目的所有分配记录&#10;        assignmentDAO.deleteByExamId(testAssignment.getExamId());&#10;&#10;        // 验证是否已删除&#10;        List&lt;PatientExamAssignment&gt; assignments = assignmentDAO.findByExamId(testAssignment.getExamId());&#10;        assertTrue(assignments.isEmpty(), &quot;删除后不应找到该检查项目的任何分配记录&quot;);&#10;&#10;        // 防止tearDown中重复删除&#10;        testAssignment = null;&#10;    }&#10;&#10;    @Test&#10;    void testDeleteByPatientAndExam() {&#10;        // 删除特定的分配记录&#10;        assignmentDAO.deleteByPatientAndExam(testAssignment.getPatientId(), testAssignment.getExamId());&#10;&#10;        // 验证是否已删除&#10;        Optional&lt;PatientExamAssignment&gt; foundAssignment = assignmentDAO.findById(testAssignment.getAssignmentId());&#10;        assertFalse(foundAssignment.isPresent(), &quot;删除后不应找到该分配记录&quot;);&#10;&#10;        // 防止tearDown中重复删除&#10;        testAssignment = null;&#10;    }&#10;&#10;    @Test&#10;    void testFindByPatientId() {&#10;        List&lt;PatientExamAssignment&gt; assignments = assignmentDAO.findByPatientId(testAssignment.getPatientId());&#10;        assertNotNull(assignments, &quot;患者分配记录列表不应为null&quot;);&#10;        assertTrue(assignments.size() &gt;= 1, &quot;应该至少找到一个分配记录&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testFindByExamId() {&#10;        List&lt;PatientExamAssignment&gt; assignments = assignmentDAO.findByExamId(testAssignment.getExamId());&#10;        assertNotNull(assignments, &quot;检查项目分配记录列表不应为null&quot;);&#10;        assertTrue(assignments.size() &gt;= 1, &quot;应该至少找到一个分配记录&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testFindByStatus() {&#10;        List&lt;PatientExamAssignment&gt; assignments = assignmentDAO.findByStatus(&quot;Pending&quot;);&#10;        assertNotNull(assignments, &quot;状态为Pending的分配记录列表不应为null&quot;);&#10;        assertTrue(assignments.size() &gt;= 1, &quot;应该至少找到一个Pending状态的分配记录&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testUpdateAssignmentStatus() {&#10;        boolean updated = assignmentDAO.updateAssignmentStatus(testAssignment.getAssignmentId(), &quot;Completed&quot;);&#10;        assertTrue(updated, &quot;应该成功更新分配状态&quot;);&#10;&#10;        Optional&lt;PatientExamAssignment&gt; foundAssignment = assignmentDAO.findById(testAssignment.getAssignmentId());&#10;        assertTrue(foundAssignment.isPresent(), &quot;应该能找到分配记录&quot;);&#10;        assertEquals(&quot;Completed&quot;, foundAssignment.get().getStatus(), &quot;分配状态应该已更新&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testScheduleExam() {&#10;        boolean scheduled = assignmentDAO.scheduleExam(testAssignment.getAssignmentId(), 1, new Date());&#10;        assertTrue(scheduled, &quot;应该成功安排检查&quot;);&#10;&#10;        Optional&lt;PatientExamAssignment&gt; foundAssignment = assignmentDAO.findById(testAssignment.getAssignmentId());&#10;        assertTrue(foundAssignment.isPresent(), &quot;应该能找到分配记录&quot;);&#10;        assertEquals(&quot;Scheduled&quot;, foundAssignment.get().getStatus(), &quot;分配状态应该已更新为Scheduled&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testFindPendingAssignments() {&#10;        List&lt;PatientExamAssignment&gt; assignments = assignmentDAO.findPendingAssignments();&#10;        assertNotNull(assignments, &quot;待处理分配记录列表不应为null&quot;);&#10;        assertTrue(assignments.size() &gt;= 1, &quot;应该至少找到一个待处理分配记录&quot;);&#10;    }&#10;&#10;    @Test&#10;    void testCountAssignmentsByPatient() {&#10;        int count = assignmentDAO.countAssignmentsByPatient(testAssignment.getPatientId());&#10;        assertTrue(count &gt;= 1, &quot;患者分配记录计数应该至少为1&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>